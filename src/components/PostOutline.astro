---
interface Props {
    headings: Array<{
        depth: number;
        text: string;
        slug: string;
    }>;
}

const { headings } = Astro.props;
---

{headings.length > 0 && (
    <>
        <button class='outline-toggle' aria-label='Toggle table of contents'>
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                <line x1="3" y1="12" x2="21" y2="12"></line>
                <line x1="3" y1="6" x2="21" y2="6"></line>
                <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
        </button>
        <aside class='post-outline'>
            <nav class='outline-nav'>
                <h3>Outline</h3>
                <ul>
                    {headings.map((heading) => (
                        <li class={`outline-item depth-${heading.depth}`}>
                            <a href={`#${heading.slug}`}>{heading.text}</a>
                        </li>
                    ))}
                </ul>
            </nav>
        </aside>
    </>
)}

<style>
    .outline-toggle {
        display: none; /* Hidden by default */
        position: fixed;
        bottom: 1.25rem;
        right: 1.25rem;
        z-index: 100;
        background: transparent;
        color: var(--accent-color);
        border: none;
        width: 2rem;
        height: 2rem;
        padding: 0;
        cursor: pointer;
        opacity: 0.8;
        transition: all 0.2s ease;
        align-items: center;
        justify-content: center;
    }

    .outline-toggle:hover {
        opacity: 1;
        color: var(--primary-text);
    }

    .post-outline {
        position: sticky;
        top: 2rem;
        max-height: calc(100vh - 4rem);
        overflow-y: auto;
        padding: 1.5rem;
        background: var(--primary-bg);
        border: 1px solid var(--secondary-bg);
        border-radius: 8px;
        font-size: 0.9rem;
        line-height: 1.4;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

    .post-outline::-webkit-scrollbar {
        display: none;
    }

    .outline-nav h3 {
        margin: 0 0 1.25rem 0;
        font-size: 1.1rem;
        color: var(--primary-text);
        font-weight: 600;
        letter-spacing: -0.01em;
    }

    .outline-nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .outline-item {
        margin: 0.4rem 0;
        padding: 0;
    }

    .outline-item a {
        color: var(--secondary-text);
        text-decoration: none;
        transition: all 0.2s ease;
        display: block;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        margin-left: -0.5rem;
        position: relative;
    }

    .outline-item a::after {
        content: '';
        display: inline-block;
        width: 1rem;
        height: 1rem;
        background-image: url('/assets/link.svg');
        background-size: contain;
        background-repeat: no-repeat;
        opacity: 0;
        position: absolute;
        right: 0.5rem;
        top: 50%;
        transform: translateY(-50%);
        transition: opacity 0.2s ease;
    }

    .outline-item a:hover::after {
        opacity: 0.5;
    }

    .dark .outline-item a::after {
        background-image: url('/assets/link-dark.svg');
    }

    .outline-item a:hover {
        color: var(--accent-color);
        background: var(--hover-bg);
        text-decoration: none;
    }

    /* Indent based on heading depth */
    .depth-1 { font-weight: 600; }
    .depth-2 { padding-left: 0.5rem; }
    .depth-3 { padding-left: 1rem; font-size: 0.95em; color: var(--secondary-text); }
    .depth-4 { padding-left: 1.5rem; font-size: 0.9em; color: var(--secondary-text); }
    .depth-5 { padding-left: 2rem; font-size: 0.85em; color: var(--secondary-text); }
    .depth-6 { padding-left: 2.5rem; font-size: 0.8em; color: var(--secondary-text); }

    /* Active heading highlight */
    .outline-item a.active {
        color: var(--accent-color);
        background: var(--hover-bg);
        font-weight: 500;
    }

    /* Responsive design */
    @media (max-width: 1024px) {
        .outline-toggle {
            display: flex; /* Only show on mobile */
        }

        .post-outline {
            position: fixed;
            top: 0;
            right: -300px;
            width: 280px;
            height: 100vh;
            margin: 0;
            padding: 1rem;
            background: var(--primary-bg);
            border-left: 1px solid var(--secondary-bg);
            transition: right 0.3s ease;
            z-index: 99;
            overflow-y: auto;
        }

        .post-outline.open {
            right: 0;
        }

        /* Add overlay when outline is open */
        .outline-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 98;
            pointer-events: none; /* Allow clicking through the overlay */
        }

        .outline-overlay.open {
            display: block;
            pointer-events: auto; /* Only capture clicks when open */
        }
    }
</style>

<script>
    // Get the header height for offset calculations
    const header = document.querySelector('header');
    const headerHeight = header?.offsetHeight || 0;
    const offset = 20; // Additional padding for comfort
    const totalOffset = headerHeight + offset;

    function updateActiveHeading() {
        const headings = document.querySelectorAll('h2, h3, h4, h5, h6'); // Include all heading levels
        const outlineLinks = document.querySelectorAll('.outline-item a');

        // Remove active class from all links
        outlineLinks.forEach(link => link.classList.remove('active'));

        // Find the first heading that's above the viewport (accounting for header)
        let activeHeading = null;
        for (const heading of headings) {
            const rect = heading.getBoundingClientRect();
            if (rect.top >= totalOffset) {
                break;
            }
            activeHeading = heading;
        }

        // If we found an active heading, highlight its link
        if (activeHeading) {
            const activeLink = document.querySelector(`.outline-item a[href="#${activeHeading.id}"]`);
            if (activeLink) {
                activeLink.classList.add('active');
            }
        } else if (headings.length > 0) {
            // If we're at the top of the page, highlight the first heading
            const firstLink = document.querySelector('.outline-item a');
            if (firstLink) {
                firstLink.classList.add('active');
            }
        }
    }

    // Update active heading on scroll
    window.addEventListener('scroll', () => {
        requestAnimationFrame(updateActiveHeading);
    });

    // Update active heading on load
    document.addEventListener('DOMContentLoaded', () => {
        updateActiveHeading();

        // Handle direct URL hash navigation
        if (window.location.hash) {
            const targetElement = document.querySelector(window.location.hash);
            if (targetElement) {
                // Small delay to ensure header height is calculated correctly
                setTimeout(updateActiveHeading, 100);
            }
        }
    });

    // Toggle outline on mobile
    const toggleButton = document.querySelector('.outline-toggle');
    const outline = document.querySelector('.post-outline');
    let overlay: HTMLDivElement | null = null;

    if (toggleButton && outline) {
        // Create overlay element
        overlay = document.createElement('div');
        overlay.className = 'outline-overlay';
        document.body.appendChild(overlay);

        // Toggle outline visibility
        function toggleOutline() {
            outline?.classList.toggle('open');
            overlay?.classList.toggle('open');
        }

        // Add click handlers
        toggleButton.addEventListener('click', toggleOutline);
        overlay.addEventListener('click', toggleOutline);

        // Close outline when clicking a link
        outline.querySelectorAll('a').forEach(link => {
            link.addEventListener('click', () => {
                if (window.innerWidth <= 1024) {
                    toggleOutline();
                }
            });
        });
    }
</script>